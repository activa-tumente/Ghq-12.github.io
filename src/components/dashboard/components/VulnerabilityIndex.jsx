import React, { useMemo } from 'react';
import { CardSkeleton } from '../../ui/SkeletonLoader';

const VulnerabilityIndex = ({ data, loading }) => {
  if (loading) {
    return <CardSkeleton showHeader={true} lines={5} />;
  }

  // Calcular datos del IVP desde los datos del dashboard
  const vulnerabilityData = useMemo(() => {
    // Verificar si tenemos datos de métricas
    const metrics = data?.metrics || data?.data?.metrics || {};
    const responses = data?.responses || data?.data?.responses || [];

    // Si tenemos el vulnerabilityIndex calculado, usarlo
    if (metrics.vulnerabilityIndex !== undefined) {
      // Calcular componentes individuales desde las respuestas
      let puntajeAlto = 0;
      let motivacionBaja = 0;
      let accidentesPrevios = 0;

      if (responses.length > 0) {
        const validResponses = responses.filter(r => r.usuarios && r.puntaje_normalizado !== null);
        
        if (validResponses.length > 0) {
          puntajeAlto = (validResponses.filter(r => parseFloat(r.puntaje_normalizado) >= 3).length / validResponses.length) * 100;
          motivacionBaja = (validResponses.filter(r => r.usuarios.motivacion_seguridad && parseFloat(r.usuarios.motivacion_seguridad) <= 2).length / validResponses.length) * 100;
          accidentesPrevios = (validResponses.filter(r => r.usuarios.accidentes_previos).length / validResponses.length) * 100;
        }
      }

      return {
        index: metrics.vulnerabilityIndex,
        components: {
          puntajeAlto: Math.round(puntajeAlto * 10) / 10,
          motivacionBaja: Math.round(motivacionBaja * 10) / 10,
          accidentesPrevios: Math.round(accidentesPrevios * 10) / 10
        }
      };
    }

    // Datos de fallback
    return {
      index: 0,
      components: {
        puntajeAlto: 0,
        motivacionBaja: 0,
        accidentesPrevios: 0
      }
    };
  }, [data]);

  const getRiskLevel = (index) => {
    if (index >= 70) return { level: 'Muy Alto', color: 'text-red-600', bg: 'bg-red-50' };
    if (index >= 50) return { level: 'Alto', color: 'text-orange-600', bg: 'bg-orange-50' };
    if (index >= 30) return { level: 'Moderado', color: 'text-yellow-600', bg: 'bg-yellow-50' };
    return { level: 'Bajo', color: 'text-green-600', bg: 'bg-green-50' };
  };

  const riskLevel = getRiskLevel(vulnerabilityData.index);

  const factors = [
    { key: 'puntajeAlto', label: 'Puntaje GHQ-12 alto (≥3)', value: vulnerabilityData.components.puntajeAlto },
    { key: 'motivacionBaja', label: 'Motivación seguridad baja (≤2)', value: vulnerabilityData.components.motivacionBaja },
    { key: 'accidentesPrevios', label: 'Accidentes previos', value: vulnerabilityData.components.accidentesPrevios }
  ];

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">
          Índice de Vulnerabilidad Psicosocial (IVP)
        </h3>
        <span className="text-2xl">⚠️</span>
      </div>

      {/* IVP Score */}
      <div className={`text-center mb-6 p-4 rounded-lg ${riskLevel.bg}`}>
        <div className="text-3xl font-bold text-gray-900 mb-2">
          {vulnerabilityData.index}%
        </div>
        <div className={`text-lg font-medium ${riskLevel.color}`}>
          Riesgo {riskLevel.level}
        </div>
      </div>

      {/* Factors Breakdown */}
      <div className="space-y-3 mb-6">
        <h4 className="text-sm font-medium text-gray-900">
          Factores de Vulnerabilidad:
        </h4>
        
        {factors.map((factor) => {
          const value = factor.value || 0;
          
          return (
            <div key={factor.key} className="text-sm">
              <div className="flex justify-between mb-1">
                <span className="text-gray-600">{factor.label}</span>
                <span className="font-semibold">{value}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-red-500 h-2 rounded-full" 
                  style={{ width: `${value}%` }}
                />
              </div>
            </div>
          );
        })}
      </div>

      {/* Formula Explanation */}
      <div className="p-3 bg-gray-50 rounded-md">
        <p className="text-xs text-gray-600">
          <strong>Fórmula IVP:</strong> (Puntaje GHQ + (5 - Motivación) + Accidentes) / 3 × 100
        </p>
        <p className="text-xs text-gray-500 mt-1">
          Índice de vulnerabilidad psicosocial basado en salud mental y factores de riesgo
        </p>
      </div>
    </div>
  );
};

export default VulnerabilityIndex;